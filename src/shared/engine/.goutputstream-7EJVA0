#include "EndActions.h"
#include <iostream>

using namespace engine;
using namespace state;
using namespace std;

EndActions::EndActions(){
	id = ENDACTIONS;
}

void EndActions::execute(state::State& state){
	player = state.getPlaying();
	
	for(size_t i=0; i<state.getPlayers().size();i++){ //Parcourir la liste des joueurs qui est triée par ordre d'action
		
		if(player==state.getPlayers()[i]){ //Si le joueur est bien dans la liste des joueurs
			
			cout << endl << "| Fin d'action |" << endl;
			
			//Dégat de status et terrain
			std::vector<std::pair<CharStatusId, int>> status = player->getStatus();
			if (status[0].second>0){
				cout << "Degats de brulure" << endl;
				player->setHp(player->getHp()*0.95f);
			}
			if (status[1].second>0){
				cout << "Degats de poison" << endl;
				player->setHp(player->getHp()*0.95f);
				if(player->getInitiative()>0){
					player->setInitiative(player->getInitiative()-1);
				}
			}
			
			//Décrémentation de la durée des statuts joueur
			for(size_t j; j<status.size(); j++){
				if(status[j].second>0){
					player->updateStatus({status[j].first,status[j].second-1});
					cout << "Decrementation de la duree du status " << j << endl;
				}
			}
			//Décrémentation de la durée des statuts terrain
			std::vector<Field> field_grid = state.getGrid();
			std::vector<std::pair<FieldStatusId,int>> field_status;
			for(size_t fy; fy<field_grid.size(); fy++){
				for(size_t fx; fx<field_grid[fy].size(); fx++){
					field_status.push_back(field_grid[fy][fx].getStatus());
				}
			}
			for(size_t s;s<field_status.size(); s++){
				if(field_status[s].second>0){
					//field_status->updateStatus({field_status[s].first,status[s].second-1});
					cout << "Decrementation de la duree du status terrain n°" << s << endl;
				}
			}
			
			//autres effet de terrain
			int X = attacker->getX();
			int Y = attacker->getY();
			int chanceEffet;
			std::vector<std::pair<FieldStatusId,int>> current_field_status = state.getGrid()[Y][X];
			for(size_t s;s<current_field_status.size(); s++){
				if(field_status[s].first==SAND){
					//diminu l'initiative
					if(player->getInitiative()>0){
						player->setInitiative(player->getInitiative()-1);
					}
				} else if(field_status[s].first==SWAMP){
					//empoisonne le personnage
					srand(time(NULL));
					chanceEffet=rand()%100 + 1;
					if(chanceEsquive>=10){
						cout << "Effet poison ratÃ© "<< endl;
					}else{
						cout << "Joueur empoisonné"<< endl;
						bool test_fc=true;
						for(size_t k=0; k<status.size();k++){
							if ((status[k].first==POISONNED) && (status[k].second<2)){
								test_fc=false;
								break;
							}
						}
						if(test_fc){
							std::pair<CharStatusId, int> newStatus = {POISSONED,2};
							player->updateStatus(newStatus);
							cout<<"Le joueur "<<player->getName()<<" sera empoisonné pendant "<<2<<" tours"<<endl;
						}
					}
				}
				
				if(field_status[s].first==SNOW){
					//diminu l'initiative
					srand(time(NULL));
					chanceEffet=rand()%100 + 1;
					if(chanceEsquive>=50){
						cout << "Baisse d'initiative ratÃ© "<< endl;
					}else{
						cout << "Initiative joueur baissé"<< endl;
						if(player->getInitiative()>0){
							player->setInitiative(player->getInitiative()-1);
						}
					}
				}
				if(field_status[s].first==BURNING){
					//brule le personnage
					srand(time(NULL));
					chanceEffet=rand()%100 + 1;
					if(chanceEsquive>=25){
						cout << "Effet  ratÃ© "<< endl;
					}else{
						cout << "Joueur brulé"<< endl;
						bool test_fc=true;
						for(size_t k=0; k<status.size();k++){
							if ((status[k].first==BURNED) && (status[k].second<2)){
								test_fc=false;
								break;
							}
						}
						if(test_fc){
							std::pair<CharStatusId, int> newStatus = {BURNED,2};
							player->updateStatus(newStatus);
							cout<<"Le joueur "<<player->getName()<<" sera brulé pendant "<<2<<" tours"<<endl;
						}
					}
				}
			}
			
			
			//Réinitialisation des PM et PA
			player->setMovement(player->getCharacter()->getMovementBase());
			cout << "Reinitialisation des PM du joueur" << endl;
			player->setSkillCount(player->getCharacter()->getSkillCountBase());
			cout << "Reinitialisation des PA du joueur" << endl;
			
			//Avancement du tour d'action
			//Si ce n'est pas le dernier joueur du round
			if(i<state.getPlayers().size()-1){ 
				state.setPlaying(state.getPlayers()[i+1]);
				cout << endl << "---------- Tour du joueur " << state.getPlaying()->getName() << " ----------" << endl;
			}
			//Fin de round
			else{ 
				cout << endl << "[ Fin de round ]" << endl;
				state.sortPlayers();
				cout << "Nouvel ordre de jeu : ";
				for (Player* p : state.getPlayers()){
					cout << p->getName() << " ";
				}
				cout << endl;
				
				cout << "[ Nouveau round ]" << endl;
			}
			
			return;
		}
	}
	cout << "Joueur non trouvé pour la fin d'action" << endl;
	return;
}

